const express = require("express");
const router = express.Router();
const SlideCar = require("../models/SlideCar");
const mongoose = require("mongoose");

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
    try {
        const slideCars = await SlideCar.find().populate("driver", "username phone"); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô SlideCar ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        
        console.log("üöó SlideCars Data:", slideCars); // ‚úÖ LOG ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        res.json(slideCars);
    } catch (error) {
        console.error("‚ùå Error fetching slide cars:", error);
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ!" });
    }
});

router.post("/", async (req, res) => {
    try {
      const { brand, model, licensePlate, driver, status } = req.body;
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!brand || !model || !licensePlate || !status) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
      }
  
      const newSlideCar = new SlideCar({
        brand,
        model,
        licensePlate,
        driver: driver || null,
        status,
      });
  
      await newSlideCar.save();
      res.status(201).json({ message: "üöó ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", slideCar: newSlideCar });
    } catch (error) {
      console.error("‚ùå Error adding slide car:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå", error });
    }
  });

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå
router.put("/update-status/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const { status } = req.body;
  
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
  
      const slideCar = await SlideCar.findByIdAndUpdate(id, { status }, { new: true });
  
      if (!slideCar) {
        return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå!" });
      }
  
      res.json(slideCar);
    } catch (error) {
      console.error("‚ùå Error updating status:", error);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ!" });
    }
  });

// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå
router.put("/assign-driver/:id", async (req, res) => {
  try {
    const { driverId } = req.body;
    const slideCar = await SlideCar.findById(req.params.id);
    if (!slideCar) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå" });
    }

    slideCar.driver = driverId;
    await slideCar.save();
    res.json({ message: "‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", slideCar });
  } catch (error) {
    console.error("‚ùå Error assigning driver:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// ‚úÖ ‡∏•‡∏ö‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå
router.delete("/:id", async (req, res) => {
  try {
    const slideCar = await SlideCar.findByIdAndDelete(req.params.id);
    if (!slideCar) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå" });
    }
    res.json({ message: "‚úÖ ‡∏•‡∏ö‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error deleting slide car:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå
router.put("/:id", async (req, res) => {
    try {
      const { id } = req.params;
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
  
      const { brand, model, licensePlate, driver, status } = req.body;
      const updateData = { brand, model, licensePlate, status };
  
      if (driver && mongoose.Types.ObjectId.isValid(driver)) {
        updateData.driver = new mongoose.Types.ObjectId(driver);
      } else {
        updateData.driver = null;
      }
  
      const updatedSlideCar = await SlideCar.findByIdAndUpdate(id, updateData, { new: true });
  
      if (!updatedSlideCar) {
        return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå!" });
      }
  
      res.json({ message: "üöó ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", updatedSlideCar });
    } catch (error) {
      console.error("‚ùå Error updating slide car:", error);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ!" });
    }
  });


  router.get("/:id", async (req, res) => {
    try {
      const { id } = req.params;
      
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
  
      const slideCar = await SlideCar.findById(id).populate("driver", "username phone");
      if (!slideCar) {
        return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå" });
      }
  
      res.json(slideCar);
    } catch (error) {
      console.error("‚ùå Error fetching slide car:", error);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ!" });
    }
  });
  


module.exports = router;
