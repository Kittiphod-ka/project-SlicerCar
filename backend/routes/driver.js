const express = require("express");
const router = express.Router();
const Booking = require("../models/Booking"); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå `booking.js` ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
const Driver = require("../models/driver");
const jwt = require('jsonwebtoken');
const authMiddleware = require("../middleware/authMiddleware"); 
const mongoose = require("mongoose");
const SlideCar = require("../models/SlideCar");



// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° authMiddleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
router.get("/", authMiddleware, async (req, res) => {
  try {
    const drivers = await Driver.find();
    res.json(drivers);
  } catch (error) {
    console.error("‚ùå Error fetching drivers:", error);
    res.status(500).json({ message: "Server error" });
  }
});




// üìå ‚úÖ ‡∏î‡∏∂‡∏á "‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏±‡∏ö
router.get("/driver/orders", async (req, res) => {
  try {
    const orders = await Booking.find({ status: "‡∏£‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" }); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö
    res.json(orders);
  } catch (error) {
    console.error("‚ùå Error fetching driver orders:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

// üìå ‚úÖ ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
router.post("/driver/accept-order", async (req, res) => {
  const { order_id, driver_id } = req.body;
  try {
    const order = await Booking.findById(order_id);
    if (!order) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ" });

    order.status = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
    order.driver_id = driver_id;
    await order.save();

    res.json({ message: "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", order });
  } catch (error) {
    console.error("‚ùå Error updating order:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô" });
  }
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
router.get("/status/:driverId", async (req, res) => {
  try {
    const driver = await Driver.findById(req.params.driverId);
    if (!driver) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" });

    res.json({ status: driver.status });
  } catch (error) {
    console.error("‚ùå Error fetching driver status:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ" });
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
router.post("/update-status", async (req, res) => {
  try {
    const { driver_id, status } = req.body;

    console.log(`üì° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö: ${driver_id} -> ${status}`);

    const driver = await Driver.findOneAndUpdate(
      { _id: driver_id },  // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏à‡∏≤‡∏Å ID
      { status },          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ status ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      { new: true, runValidators: false } // ‚úÖ ‡∏õ‡∏¥‡∏î validation ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    );

    if (!driver) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö");
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" });
    }

    console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", driver);
    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", status: driver.status });

  } catch (error) {
    console.error("‚ùå Error updating driver status:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ" });
  }
});

router.get("/api/drivers", async (req, res) => {
  try {
    const drivers = await Driver.find();
    res.json(drivers);
  } catch (error) {
    console.error("‚ùå Error fetching drivers:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ" });
  }
});

router.get("/drivers/available", authenticateToken, async (req, res) => {
  try {
      const drivers = await Driver.find({ status: "on" });
      res.json(drivers);
  } catch (error) {
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏î‡πâ" });
  }
});

function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (Invalid Token)" });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
      if (err) return res.status(403).json({ message: "‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      req.user = user;
      next();
  });
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/all", async (req, res) => {
  try {
    const drivers = await Driver.find();
    res.json(drivers);
  } catch (error) {
    console.error("‚ùå Error fetching drivers:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ!" });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
router.post("/", async (req, res) => {
  try {
    const { username, name, password, phone, status } = req.body;
    const newDriver = new Driver({ username, name, password, phone, status });
    await newDriver.save();
    res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", newDriver });
  } catch (error) {
    console.error("‚ùå Error adding driver:", error);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  }
});

// // // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
router.get("/drivers/:id", async (req, res) => {
  try {
    const { id } = req.params;
    console.log("üîç ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ ID:", id);

    if (!mongoose.Types.ObjectId.isValid(id)) {
      console.log("‚ö†Ô∏è ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", id);
      return res.status(400).json({ message: "‚ùå ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!" });
    }

    const driver = await Driver.findById(id);
    if (!driver) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö:", id);
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö!" });
    }

    console.log("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö:", driver);
    res.json(driver);
  } catch (error) {
    console.error("‚ùå Error fetching driver:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ!" });
  }
});




router.put("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "‚ùå ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!" });
    }

    const { name, phone, status } = req.body;
    const updatedDriver = await Driver.findByIdAndUpdate(id, { name, phone, status }, { new: true });

    if (!updatedDriver) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö!" });
    }

    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", updatedDriver });
  } catch (error) {
    console.error("‚ùå Error updating driver:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ!" });
  }
});

router.put("/update-status/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    // ‚úÖ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ObjectId ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ObjectId
    const updatedCar = await SlideCar.findOneAndUpdate({ _id: id }, { status }, { new: true });

    if (!updatedCar) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå!" });

    res.json(updatedCar);
  } catch (error) {
    console.error("‚ùå Error updating status:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ!" });
  }
});

module.exports = router;
