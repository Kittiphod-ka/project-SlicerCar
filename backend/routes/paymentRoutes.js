const express = require("express");
const router = express.Router();
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const Booking = require("../models/Booking"); // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Model Booking

router.post("/create-payment-link", async (req, res) => {
  try {
    const { amount, bookingData } = req.body;

    if (!amount || !bookingData) {
      return res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!" });
    }

    console.log("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Payment Link ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:", bookingData);

    // üî¥ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Payment Gateway ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!process.env.STRIPE_SECRET_KEY) {
      return res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö PAYMENT_API_KEY ‡πÉ‡∏ô .env!" });
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Payment Gateway (‡πÄ‡∏ä‡πà‡∏ô Omise, Stripe)
    const paymentResponse = await axios.post(
      "https://api.payment-gateway.com/create-link",
      {
        amount,
        currency: "THB",
        description: `Booking ID: ${bookingData._id}`,
      },
      {
        headers: { Authorization: `Bearer ${process.env.PAYMENT_API_KEY}` },
      }
    );

    if (!paymentResponse.data || !paymentResponse.data.url) {
      return res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ!" });
    }

    res.json({ url: paymentResponse.data.url, bookingId: bookingData._id });
  } catch (error) {
    console.error("‚ùå Error creating payment link:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ!" });
  }
});

router.post("/confirm-payment", async (req, res) => {
  try {
      const { _id } = req.body;

      if (!_id || _id === "undefined") {
          return res.status(400).json({ message: "‚ùå _id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }

      console.log("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Booking _id:", _id);

      const booking = await Booking.findByIdAndUpdate(
          _id,
          { payment_status: "paid" },
          { new: true }
      );

      if (!booking) {
          return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Booking ‡∏ô‡∏µ‡πâ" });
      }

      res.json({ message: "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking });
  } catch (error) {
      console.error("‚ùå Error updating booking:", error);
      res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
  }
});

module.exports = router;
